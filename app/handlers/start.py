from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from app.config import Config
from app.keyboards.inline import main_menu
from app.models import Settings

router = Router()


def format_main_menu_text(settings: Settings) -> str:
    audio_status = "üîä –í–∫–ª" if settings.audio else "üîá –í—ã–∫–ª"
    return f"""üé¨ <b>–í–∏–¥–µ–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä</b>

üìè <b>–†–∞–∑–º–µ—Ä:</b> {settings.width}√ó{settings.height}
üéûÔ∏è <b>FPS:</b> {settings.fps}
{audio_status} <b>–ê—É–¥–∏–æ:</b> {"–í–∫–ª" if settings.audio else "–í—ã–∫–ª"}
‚öôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ (CRF):</b> {settings.crf}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ/—Å—Å—ã–ª–∫—É –Ω–∞ TikTok –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è"""


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    cfg = Config.load()
    settings = Settings.from_defaults(cfg.defaults)
    await state.update_data(settings=settings)
    msg = await message.answer(
        "‚åõ", reply_markup=ReplyKeyboardRemove(remove_keyboard=True)
    )
    await msg.delete()
    menu_msg = await message.answer(
        format_main_menu_text(settings), reply_markup=main_menu(), parse_mode="HTML"
    )
    await state.update_data(
        menu_message_id=menu_msg.message_id, chat_id=menu_msg.chat.id
    )


@router.callback_query(F.data == "back_main")
async def back_main(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ TikTok —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    from app.services.tiktok import TikTokDownloader

    downloader: TikTokDownloader = data.get("downloader")
    if downloader:
        downloader.cleanup()

    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ TikTok, –µ—Å–ª–∏ –µ—Å—Ç—å
    editor_menu_message_id = data.get("editor_menu_message_id")
    editor_menu_chat_id = data.get("editor_menu_chat_id")
    if editor_menu_message_id and editor_menu_chat_id:
        try:
            await cb.bot.delete_message(editor_menu_chat_id, editor_menu_message_id)
        except Exception:
            pass

    settings = data.get("settings")
    if not settings:
        settings = Settings.from_defaults(Config.load().defaults)
        await state.update_data(settings=settings)
    await cb.message.edit_text(
        format_main_menu_text(settings), reply_markup=main_menu(), parse_mode="HTML"
    )
    await state.update_data(
        menu_message_id=cb.message.message_id, chat_id=cb.message.chat.id
    )
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await cb.answer()
