import os
import re
import asyncio
import tempfile

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, BufferedInputFile, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.states import TikTokEditStates
from app.config import Config
from app.models import Settings
from app.keyboards.inline import (
    main_menu, back_menu, crop_edit_menu, crop_size_menu, 
    time_edit_menu, preview_menu
)
from app.services.tiktok import TikTokDownloader, VideoEditor
from app.services.converter import Converter
from app.handlers.start import format_main_menu_text

router = Router()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è TikTok URL
TIKTOK_URL_PATTERN = re.compile(
    r'(?:https?://)?(?:www\.)?(?:tiktok\.com|vm\.tiktok\.com|vt\.tiktok\.com)/.*'
)


async def add_message_for_cleanup(state: FSMContext, message_id: int, chat_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"""
    data = await state.get_data()
    cleanup_messages = data.get("cleanup_messages", [])
    cleanup_messages.append({"message_id": message_id, "chat_id": chat_id})
    await state.update_data(cleanup_messages=cleanup_messages)


async def cleanup_messages(state: FSMContext, bot):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
    data = await state.get_data()
    cleanup_messages = data.get("cleanup_messages", [])
    
    for msg_info in cleanup_messages:
        try:
            await bot.delete_message(
                chat_id=msg_info["chat_id"], 
                message_id=msg_info["message_id"]
            )
        except Exception:
            pass
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    await state.update_data(cleanup_messages=[])


@router.message(F.text)
async def handle_tiktok_url_direct(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ TikTok URL –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    if not message.text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è URL –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    current_state = await state.get_state()
    if current_state == TikTokEditStates.waiting_url:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    
    url = message.text.strip()
    
    if not TIKTOK_URL_PATTERN.match(url):
        return  # –ù–µ TikTok URL, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä
    await message.answer(
        "üé¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ TikTok!\n\n"
        "–•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä", callback_data="tiktok_editor_direct")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tiktok_back_main")]
        ])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(pending_tiktok_url=url)


@router.callback_query(F.data == "tiktok_editor_direct")
async def handle_tiktok_editor_direct(cb: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É"""
    data = await state.get_data()
    url = data.get("pending_tiktok_url")
    
    if not url:
        await cb.answer("–û—à–∏–±–∫–∞: URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –£–¥–∞–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
    menu_msg_id = data.get("menu_message_id")
    chat_id = data.get("chat_id") or cb.message.chat.id
    if menu_msg_id and chat_id:
        try:
            await cb.bot.delete_message(chat_id=chat_id, message_id=menu_msg_id)
        except Exception:
            pass
    
    loading_msg = await cb.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ —Å TikTok...")
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    await add_message_for_cleanup(state, loading_msg.message_id, loading_msg.chat.id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –∏ –≤ handle_tiktok_url
    downloader = TikTokDownloader()
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        video_path = await downloader.download_video(url)
        
        # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–∞–∫ –≤ handle_tiktok_url)
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–∏–¥–µ–æ
        editor = VideoEditor(video_path)
        video_info = editor.get_video_info()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_data = await state.get_data()
        settings = settings_data.get("settings")
        if not settings:
            settings = Settings.from_defaults(Config.load().defaults)
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
        start_time = 0.0
        duration = min(3.0, video_info["duration"])  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫—Ä–æ–ø–∞
        crop_x, crop_y, crop_width, crop_height = editor.calculate_crop_bounds(
            settings.width, settings.height
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –≤—Ä–µ–º–µ–Ω–∏ (–ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø)
        crop_params = (crop_x, crop_y, crop_width, crop_height)
        preview_bytes = editor.create_time_preview(start_time, duration, crop_params)
        
        if not preview_bytes:
            await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            video_path=video_path,
            editor=editor,
            downloader=downloader,
            crop_x=crop_x,
            crop_y=crop_y,
            crop_width=crop_width,
            crop_height=crop_height,
            video_info=video_info,
            settings=settings,
            start_time=start_time,
            duration=duration
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –≤—Ä–µ–º–µ–Ω–∏
        await cb.message.edit_media(
            InputMediaPhoto(
                media=BufferedInputFile(preview_bytes, "time_preview.jpg"),
                caption=(
                    f"‚è∞ <b>–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞</b>\n\n"
                    f"ÔøΩ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_info['duration']:.1f}s\n"
                    f"‚úÇÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫: {start_time:.1f}s - {start_time + duration:.1f}s\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s\n\n"
                    f"üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                    f"‚è™‚è™ = -1 —Å–µ–∫   ‚è™ = -0.1 —Å–µ–∫\n"
                    f"‚è© = +0.1 —Å–µ–∫   ‚è©‚è© = +1 —Å–µ–∫\n\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3.0s"
                ),
                parse_mode="HTML"
            ),
            reply_markup=time_edit_menu(start_time, duration, video_info["duration"])
        )
        
        await state.update_data(
            time_message_id=cb.message.message_id,
            chat_id=cb.message.chat.id
        )
        await state.set_state(TikTokEditStates.time_editing)
        
    except Exception as e:
        await cb.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        downloader.cleanup()
    
    await cb.answer()


@router.callback_query(F.data == "tiktok_editor")
async def start_tiktok_editor(cb: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å TikTok —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º"""
    await cb.message.edit_text(
        "üì± <b>TikTok –†–µ–¥–∞–∫—Ç–æ—Ä</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=back_menu(),
        parse_mode="HTML"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    await state.update_data(
        editor_menu_message_id=cb.message.message_id,
        editor_menu_chat_id=cb.message.chat.id
    )
    await state.set_state(TikTokEditStates.waiting_url)
    await cb.answer()


@router.message(TikTokEditStates.waiting_url)
async def handle_tiktok_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ TikTok URL"""
    url = message.text.strip()
    
    if not TIKTOK_URL_PATTERN.match(url):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ TikTok. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É."
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    data = await state.get_data()
    
    # –£–¥–∞–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
    menu_msg_id = data.get("menu_message_id")
    chat_id = data.get("chat_id") or message.chat.id
    if menu_msg_id and chat_id:
        try:
            await message.bot.delete_message(chat_id=chat_id, message_id=menu_msg_id)
        except Exception:
            pass
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    editor_menu_msg_id = data.get("editor_menu_message_id")
    editor_menu_chat_id = data.get("editor_menu_chat_id") or message.chat.id
    if editor_menu_msg_id and editor_menu_chat_id:
        try:
            await message.bot.delete_message(chat_id=editor_menu_chat_id, message_id=editor_menu_msg_id)
        except Exception:
            pass
    
    status_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ —Å TikTok...")
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    await add_message_for_cleanup(state, status_msg.message_id, status_msg.chat.id)
    
    downloader = TikTokDownloader()
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        video_path = await downloader.download_video(url)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–∏–¥–µ–æ
        editor = VideoEditor(video_path)
        video_info = editor.get_video_info()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_data = await state.get_data()
        settings = settings_data.get("settings")
        if not settings:
            settings = Settings.from_defaults(Config.load().defaults)
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
        start_time = 0.0
        duration = min(3.0, video_info["duration"])  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫—Ä–æ–ø–∞
        crop_x, crop_y, crop_width, crop_height = editor.calculate_crop_bounds(
            settings.width, settings.height
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –≤—Ä–µ–º–µ–Ω–∏ (–ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø)
        crop_params = (crop_x, crop_y, crop_width, crop_height)
        preview_bytes = editor.create_time_preview(start_time, duration, crop_params)
        
        if not preview_bytes:
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            video_path=video_path,
            editor=editor,
            downloader=downloader,
            crop_x=crop_x,
            crop_y=crop_y,
            crop_width=crop_width,
            crop_height=crop_height,
            video_info=video_info,
            settings=settings,
            start_time=start_time,
            duration=duration
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –≤—Ä–µ–º–µ–Ω–∏
        await status_msg.delete()
        
        time_msg = await message.answer_photo(
            BufferedInputFile(preview_bytes, "time_preview.jpg"),
            caption=(
                f"‚è∞ <b>–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞</b>\n\n"
                f"ÔøΩ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_info['duration']:.1f}s\n"
                f"‚úÇÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫: {start_time:.1f}s - {start_time + duration:.1f}s\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s\n\n"
                f"üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                f"‚è™‚è™ = -1 —Å–µ–∫   ‚è™ = -0.1 —Å–µ–∫\n"
                f"‚è© = +0.1 —Å–µ–∫   ‚è©‚è© = +1 —Å–µ–∫\n\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3.0s"
            ),
            reply_markup=time_edit_menu(start_time, duration, video_info["duration"]),
            parse_mode="HTML"
        )
        
        await state.update_data(
            time_message_id=time_msg.message_id,
            chat_id=time_msg.chat.id
        )
        await state.set_state(TikTokEditStates.time_editing)
        
    except Exception as e:
        error_msg = str(e)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "Requested format is not available" in error_msg:
            await status_msg.edit_text(
                "‚ùå <b>–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ\n"
                "‚Ä¢ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"
                "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—è\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.",
                parse_mode="HTML"
            )
        elif "HTTP Error 403" in error_msg or "Forbidden" in error_msg:
            await status_msg.edit_text(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–í–∏–¥–µ–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
                "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–º\n"
                "‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ\n"
                "‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã–º –∞–≤—Ç–æ—Ä–æ–º\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.",
                parse_mode="HTML"
            )
        elif "network" in error_msg.lower() or "connection" in error_msg.lower():
            await status_msg.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–µ—Ç–∏</b>\n\n"
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ TikTok.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode="HTML"
            )
        else:
            await status_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ</b>\n\n"
                f"–î–µ—Ç–∞–ª–∏: {error_msg}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                parse_mode="HTML"
            )
        
        downloader.cleanup()


@router.callback_query(TikTokEditStates.crop_editing, F.data.startswith("crop_move:"))
async def handle_crop_move(cb: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—Ä–æ–ø–∞"""
    direction = cb.data.split(":")[1]
    data = await state.get_data()
    
    editor: VideoEditor = data["editor"]
    crop_x = data["crop_x"]
    crop_y = data["crop_y"]
    crop_width = data["crop_width"]
    crop_height = data["crop_height"]
    settings = data["settings"]
    
    # –®–∞–≥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    step = 20
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—Ä–æ–ø
    if direction == "up":
        crop_y = max(0, crop_y - step)
    elif direction == "down":
        crop_y = min(editor.height - crop_height, crop_y + step)
    elif direction == "left":
        crop_x = max(0, crop_x - step)
    elif direction == "right":
        crop_x = min(editor.width - crop_width, crop_x + step)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–≤—å—é
    preview_bytes = editor.create_crop_preview(crop_x, crop_y, crop_width, crop_height)
    
    if preview_bytes:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await cb.message.edit_media(
                media=InputMediaPhoto(
                    media=BufferedInputFile(preview_bytes, "crop_preview.jpg"),
                    caption=(
                        f"üé¨ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–æ–ø–∞</b>\n\n"
                        f"üìê –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {editor.width}x{editor.height}\n"
                        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {editor.duration:.1f}s\n"
                        f"‚úÇÔ∏è –ö—Ä–æ–ø: {crop_width}x{crop_height}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–µ–∑–∫–∏:"
                    ),
                    parse_mode="HTML"
                ),
                reply_markup=crop_edit_menu(settings)
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await cb.message.delete()
            new_msg = await cb.message.answer_photo(
                BufferedInputFile(preview_bytes, "crop_preview.jpg"),
                caption=(
                    f"üé¨ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–æ–ø–∞</b>\n\n"
                    f"üìê –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {editor.width}x{editor.height}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {editor.duration:.1f}s\n"
                    f"‚úÇÔ∏è –ö—Ä–æ–ø: {crop_width}x{crop_height}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–µ–∑–∫–∏:"
                ),
                reply_markup=crop_edit_menu(settings),
                parse_mode="HTML"
            )
            await state.update_data(crop_message_id=new_msg.message_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    await state.update_data(crop_x=crop_x, crop_y=crop_y)
    await cb.answer()


@router.callback_query(TikTokEditStates.crop_editing, F.data == "crop_size")
async def handle_crop_size_menu(cb: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫—Ä–æ–ø–∞"""
    await cb.message.edit_reply_markup(reply_markup=crop_size_menu())
    await cb.answer()


@router.callback_query(TikTokEditStates.crop_editing, F.data.startswith("crop_size_set:"))
async def handle_crop_size_set(cb: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫—Ä–æ–ø–∞"""
    size = cb.data.split(":")[1]
    width, height = map(int, size.split("x"))
    
    data = await state.get_data()
    editor: VideoEditor = data["editor"]
    settings: Settings = data["settings"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings.width = width
    settings.height = height
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—Ä–æ–ø–∞
    crop_x, crop_y, crop_width, crop_height = editor.calculate_crop_bounds(width, height)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–≤—å—é
    preview_bytes = editor.create_crop_preview(crop_x, crop_y, crop_width, crop_height)
    
    if preview_bytes:
        try:
            await cb.message.edit_media(
                media=InputMediaPhoto(
                    media=BufferedInputFile(preview_bytes, "crop_preview.jpg"),
                    caption=(
                        f"üé¨ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–æ–ø–∞</b>\n\n"
                        f"üìê –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {editor.width}x{editor.height}\n"
                        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {editor.duration:.1f}s\n"
                        f"‚úÇÔ∏è –ö—Ä–æ–ø: {crop_width}x{crop_height}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–µ–∑–∫–∏:"
                    ),
                    parse_mode="HTML"
                ),
                reply_markup=crop_edit_menu(settings)
            )
        except Exception:
            await cb.message.delete()
            new_msg = await cb.message.answer_photo(
                BufferedInputFile(preview_bytes, "crop_preview.jpg"),
                caption=(
                    f"üé¨ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–æ–ø–∞</b>\n\n"
                    f"üìê –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {editor.width}x{editor.height}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {editor.duration:.1f}s\n"
                    f"‚úÇÔ∏è –ö—Ä–æ–ø: {crop_width}x{crop_height}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–µ–∑–∫–∏:"
                ),
                reply_markup=crop_edit_menu(settings),
                parse_mode="HTML"
            )
            await state.update_data(crop_message_id=new_msg.message_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    await state.update_data(
        settings=settings,
        crop_x=crop_x,
        crop_y=crop_y,
        crop_width=crop_width,
        crop_height=crop_height
    )
    await cb.answer()


@router.callback_query(TikTokEditStates.crop_editing, F.data == "crop_back")
async def handle_crop_back(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫—Ä–æ–ø–∞"""
    data = await state.get_data()
    settings = data["settings"]
    await cb.message.edit_reply_markup(reply_markup=crop_edit_menu(settings))
    await cb.answer()


@router.callback_query(TikTokEditStates.crop_editing, F.data == "crop_back_to_main")
async def handle_crop_back_to_main(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–æ–ø–∞"""
    data = await state.get_data()
    settings = data.get("settings")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    downloader: TikTokDownloader = data.get("downloader")
    if downloader:
        downloader.cleanup()
    
    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ TikTok
    editor_menu_message_id = data.get("editor_menu_message_id")
    editor_menu_chat_id = data.get("editor_menu_chat_id")
    if editor_menu_message_id and editor_menu_chat_id:
        try:
            await cb.bot.delete_message(editor_menu_chat_id, editor_menu_message_id)
        except Exception:
            pass
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await cleanup_messages(state, cb.bot)
    
    await cb.message.delete()
    
    if settings:
        new_menu = await cb.message.answer(
            format_main_menu_text(settings),
            reply_markup=main_menu(),
            parse_mode="HTML"
        )
        await state.update_data(
            menu_message_id=new_menu.message_id,
            chat_id=new_menu.chat.id
        )
    
    await state.clear()
    await cb.answer()


@router.callback_query(F.data == "tiktok_back_main")
async def handle_tiktok_back_to_main(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ TikTok —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
    data = await state.get_data()
    settings = data.get("settings")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    downloader: TikTokDownloader = data.get("downloader")
    if downloader:
        downloader.cleanup()
        
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∂–∞—Ç–∏—è)
    oversized_file_path = data.get("oversized_file_path")
    temp_dir = data.get("temp_dir_path")
    if oversized_file_path and os.path.exists(oversized_file_path):
        try:
            os.remove(oversized_file_path)
        except Exception:
            pass
    if temp_dir and os.path.exists(temp_dir):
        try:
            os.rmdir(temp_dir)
        except Exception:
            pass
    
    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ TikTok
    editor_menu_message_id = data.get("editor_menu_message_id")
    editor_menu_chat_id = data.get("editor_menu_chat_id")
    if editor_menu_message_id and editor_menu_chat_id:
        try:
            await cb.bot.delete_message(editor_menu_chat_id, editor_menu_message_id)
        except Exception:
            pass
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await cleanup_messages(state, cb.bot)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if not settings:
        settings = Settings.from_defaults(Config.load().defaults)
        await state.update_data(settings=settings)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
    try:
        await cb.message.edit_text(
            format_main_menu_text(settings),
            reply_markup=main_menu(),
            parse_mode="HTML"
        )
        await state.update_data(
            menu_message_id=cb.message.message_id,
            chat_id=cb.message.chat.id
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_menu = await cb.message.answer(
            format_main_menu_text(settings),
            reply_markup=main_menu(),
            parse_mode="HTML"
        )
        await state.update_data(
            menu_message_id=new_menu.message_id,
            chat_id=new_menu.chat.id
        )
    
    await state.clear()
    await cb.answer()


@router.callback_query(TikTokEditStates.crop_editing, F.data == "crop_next")
async def handle_crop_next(cb: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É"""
    await show_preview(cb, state)
    await cb.answer()

@router.callback_query(TikTokEditStates.time_editing, F.data == "ignore")
async def handle_time_ignore(cb: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º–æ–π –∫–Ω–æ–ø–∫–∏"""
    await cb.answer("–ù–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º")

@router.callback_query(TikTokEditStates.time_editing, F.data.startswith("time_"))
async def handle_time_edit(cb: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
    action = cb.data.split(":")[0]
    direction = cb.data.split(":")[1] if ":" in cb.data else None
    
    data = await state.get_data()
    editor: VideoEditor = data["editor"]
    video_info = data["video_info"]
    start_time = data.get("start_time", 0.0)
    duration = data.get("duration", min(3.0, video_info.get("duration", 3.0)))
    max_duration = min(3.0, video_info.get("duration", 3.0))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏
    if direction and direction.endswith("_fast"):
        step = 1.0  # –ë—ã—Å—Ç—Ä—ã–π —à–∞–≥ - 1 —Å–µ–∫—É–Ω–¥–∞
        direction = direction.replace("_fast", "")  # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
    else:
        step = 0.1  # –û–±—ã—á–Ω—ã–π —à–∞–≥ - 0.1 —Å–µ–∫—É–Ω–¥—ã
    
    if action == "time_start":
        if direction == "left":
            start_time = max(0, start_time - step)
        elif direction == "right":
            start_time = min(video_info["duration"] - duration, start_time + step)
    
    elif action == "time_end":
        if direction == "left":
            new_duration = max(0.1, duration - step)
            if start_time + new_duration <= video_info["duration"]:
                duration = new_duration
        elif direction == "right":
            new_duration = min(max_duration, duration + step)
            if start_time + new_duration <= video_info["duration"]:
                duration = new_duration
    
    elif action == "time_back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫—Ä–æ–ø–∞
        crop_params = (data["crop_x"], data["crop_y"], data["crop_width"], data["crop_height"])
        preview_bytes = editor.create_crop_preview(*crop_params)
        
        if preview_bytes:
            try:
                media = InputMediaPhoto(
                    media=BufferedInputFile(preview_bytes, "crop_preview.jpg"),
                    caption=(
                        f"üé¨ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–æ–ø–∞</b>\n\n"
                        f"üìê –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {editor.width}x{editor.height}\n"
                        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {editor.duration:.1f}s\n"
                        f"‚úÇÔ∏è –ö—Ä–æ–ø: {data['crop_width']}x{data['crop_height']}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–µ–∑–∫–∏:"
                    ),
                    parse_mode="HTML"
                )
                await cb.message.edit_media(
                    media=media,
                    reply_markup=crop_edit_menu(data["settings"])
                )
            except Exception:
                pass
        
        await state.set_state(TikTokEditStates.crop_editing)
        await cb.answer()
        return
    
    elif action == "time_done":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫—Ä–æ–ø–∞
        await show_crop_editing(cb, state)
        return
    
    elif action == "time_info":
        await cb.answer(f"–û—Ç—Ä–µ–∑–æ–∫: {start_time:.1f}s - {start_time + duration:.1f}s")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
    crop_params = (data["crop_x"], data["crop_y"], data["crop_width"], data["crop_height"])
    preview_bytes = editor.create_time_preview(start_time, duration, crop_params)
    
    if preview_bytes:
        try:
            media = InputMediaPhoto(
                media=BufferedInputFile(preview_bytes, "time_preview.jpg"),
                caption=(
                    f"‚è∞ <b>–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞</b>\n\n"
                    f"üìπ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_info['duration']:.1f}s\n"
                    f"‚úÇÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫: {start_time:.1f}s - {start_time + duration:.1f}s\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s\n\n"
                    f"üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                    f"‚è™‚è™ = -1 —Å–µ–∫   ‚è™ = -0.1 —Å–µ–∫\n"
                    f"‚è© = +0.1 —Å–µ–∫   ‚è©‚è© = +1 —Å–µ–∫\n\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3.0s"
                ),
                parse_mode="HTML"
            )
            await cb.message.edit_media(
                media=media,
                reply_markup=time_edit_menu(start_time, duration, video_info["duration"])
            )
        except Exception:
            pass
    
    await state.update_data(start_time=start_time, duration=duration)
    await cb.answer()


async def show_crop_editing(cb: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–æ–ø–∞"""
    data = await state.get_data()
    editor: VideoEditor = data["editor"]
    settings = data["settings"]
    crop_params = (data["crop_x"], data["crop_y"], data["crop_width"], data["crop_height"])
    
    preview_bytes = editor.create_crop_preview(*crop_params)
    
    if preview_bytes:
        await cb.message.edit_media(
            InputMediaPhoto(
                media=BufferedInputFile(preview_bytes, "crop_preview.jpg"),
                caption=(
                    f"üé¨ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–æ–ø–∞</b>\n\n"
                    f"üìê –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {editor.width}x{editor.height}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {editor.duration:.1f}s\n"
                    f"‚úÇÔ∏è –ö—Ä–æ–ø: {data['crop_width']}x{data['crop_height']}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–µ–∑–∫–∏:"
                ),
                parse_mode="HTML"
            ),
            reply_markup=crop_edit_menu(settings)
        )
        
        await state.update_data(
            crop_message_id=cb.message.message_id,
            chat_id=cb.message.chat.id
        )
        await state.set_state(TikTokEditStates.crop_editing)


async def show_preview(cb: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    data = await state.get_data()
    editor: VideoEditor = data["editor"]
    
    crop_x = data["crop_x"]
    crop_y = data["crop_y"]  
    crop_width = data["crop_width"]
    crop_height = data["crop_height"]
    
    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
    video_info = data.get("video_info", {})
    start_time = data.get("start_time", 0.0)
    duration = data.get("duration", min(3.0, video_info.get("duration", 3.0)))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ
    if "start_time" not in data or "duration" not in data:
        await state.update_data(start_time=start_time, duration=duration)
    
    settings: Settings = data["settings"]
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
    await cb.message.delete()
    preview_msg = await cb.message.answer("üé¨ –°–æ–∑–¥–∞—é –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä...")
    await add_message_for_cleanup(state, preview_msg.message_id, preview_msg.chat.id)
    
    try:
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–≤—å—é
        temp_dir = tempfile.mkdtemp(prefix="preview_")
        preview_path = os.path.join(temp_dir, "preview.mp4")
        
        crop_params = (crop_x, crop_y, crop_width, crop_height)
        success = await editor.create_video_preview(start_time, duration, crop_params, preview_path)
        
        if success:
            await preview_msg.edit_text("üì± –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            await add_message_for_cleanup(state, preview_msg.message_id, preview_msg.chat.id)
            
            video_msg = await preview_msg.answer_video(
                FSInputFile(preview_path),
                caption=(
                    f"üé¨ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</b>\n\n"
                    f"üìê –†–∞–∑–º–µ—Ä: {crop_width}x{crop_height} ‚Üí {settings.width}x{settings.height}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {start_time:.1f}s - {start_time + duration:.1f}s\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                ),
                reply_markup=preview_menu(),
                parse_mode="HTML"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø—Ä–µ–≤—å—é –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            await add_message_for_cleanup(state, video_msg.message_id, video_msg.chat.id)
            
            # –û—á–∏—Å—Ç–∫–∞
            try:
                os.remove(preview_path)
                os.rmdir(temp_dir)
            except Exception:
                pass
        else:
            await preview_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            
    except Exception as e:
        await preview_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await state.set_state(TikTokEditStates.preview)
    await cb.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
@router.callback_query(TikTokEditStates.preview, F.data == "preview_convert")
async def handle_preview_convert(cb: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    await start_video_processing(cb, state)


@router.callback_query(TikTokEditStates.preview, F.data == "preview_edit_crop")
async def handle_preview_edit_crop(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫—Ä–æ–ø–∞"""
    data = await state.get_data()
    editor: VideoEditor = data["editor"]
    settings = data["settings"]
    crop_params = (data["crop_x"], data["crop_y"], data["crop_width"], data["crop_height"])
    
    preview_bytes = editor.create_crop_preview(*crop_params)
    
    if preview_bytes:
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫—Ä–æ–ø-—Ä–µ–¥–∞–∫—Ç–æ—Ä
        await cb.message.edit_media(
            InputMediaPhoto(
                media=BufferedInputFile(preview_bytes, "crop_preview.jpg"),
                caption=(
                    f"üé¨ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–æ–ø–∞</b>\n\n"
                    f"üìê –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {editor.width}x{editor.height}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {editor.duration:.1f}s\n"
                    f"‚úÇÔ∏è –ö—Ä–æ–ø: {data['crop_width']}x{data['crop_height']}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–µ–∑–∫–∏:"
                ),
                parse_mode="HTML"
            ),
            reply_markup=crop_edit_menu(settings)
        )
        
        await state.update_data(
            crop_message_id=cb.message.message_id,
            chat_id=cb.message.chat.id
        )
        await state.set_state(TikTokEditStates.crop_editing)
    
    await cb.answer()


@router.callback_query(TikTokEditStates.preview, F.data == "preview_edit_time")
async def handle_preview_edit_time(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏"""
    data = await state.get_data()
    editor: VideoEditor = data["editor"]
    video_info = data["video_info"]
    start_time = data.get("start_time", 0.0)
    duration = data.get("duration", min(3.0, video_info.get("duration", 3.0)))
    
    crop_params = (data["crop_x"], data["crop_y"], data["crop_width"], data["crop_height"])
    preview_bytes = editor.create_time_preview(start_time, duration, crop_params)
    
    if preview_bytes:
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
        await cb.message.edit_media(
            InputMediaPhoto(
                media=BufferedInputFile(preview_bytes, "time_preview.jpg"),
                caption=(
                    f"‚è∞ <b>–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞</b>\n\n"
                    f"üìπ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_info['duration']:.1f}s\n"
                    f"‚úÇÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫: {start_time:.1f}s - {start_time + duration:.1f}s\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s\n\n"
                    f"üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                    f"‚è™‚è™ = -1 —Å–µ–∫   ‚è™ = -0.1 —Å–µ–∫\n"
                    f"‚è© = +0.1 —Å–µ–∫   ‚è©‚è© = +1 —Å–µ–∫\n\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3.0s"
                ),
                parse_mode="HTML"
            ),
            reply_markup=time_edit_menu(start_time, duration, video_info["duration"])
        )
        
        await state.update_data(crop_message_id=cb.message.message_id)
        await state.set_state(TikTokEditStates.time_editing)
    
    await cb.answer()


@router.callback_query(F.data == "compress_file")
async def handle_compress_file(cb: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∂–∞—Ç–∏—è —Ñ–∞–π–ª–∞"""
    data = await state.get_data()
    oversized_file_path = data.get("oversized_file_path")
    temp_dir = data.get("temp_dir_path")
    
    # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞
    await state.update_data(awaiting_compression_choice=False)
    
    if not oversized_file_path or not os.path.exists(oversized_file_path):
        await cb.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    processing_msg = await cb.message.edit_text("üóú –°–∂–∏–º–∞—é —Ñ–∞–π–ª...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        settings: Settings = data["settings"]
        crop_x = data["crop_x"]
        crop_y = data["crop_y"]
        crop_width = data["crop_width"]
        crop_height = data["crop_height"]
        start_time = data["start_time"]
        duration = data["duration"]
        video_path = data["video_path"]
        
        from app.services.converter import Converter
        converter = Converter()
        
        # –ü–æ–ø—ã—Ç–∫–∏ —Å–∂–∞—Ç–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        compression_attempts = [
            {"crf": 35, "bitrate": "500k"},    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
            {"crf": 40, "bitrate": "300k"},    # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞  
            {"crf": 45, "bitrate": "200k"},    # –¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞
            {"crf": 50, "bitrate": "150k"},    # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞
        ]
        
        compressed_path = None
        for attempt_num, params in enumerate(compression_attempts, 1):
            await processing_msg.edit_text(f"üóú –°–∂–∏–º–∞—é —Ñ–∞–π–ª... –ü–æ–ø—ã—Ç–∫–∞ {attempt_num}/4")
            
            compressed_path = os.path.join(temp_dir, f"compressed_{attempt_num}.webm")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É FFmpeg —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º
            ffmpeg_path = converter.ffmpeg
            cmd = [
                ffmpeg_path,
                "-y",
                "-ss", str(start_time),
                "-t", str(duration),
                "-i", video_path,
                "-vf", f"crop={crop_width}:{crop_height}:{crop_x}:{crop_y},scale={settings.width}:{settings.height}:flags=lanczos",
                "-r", str(settings.fps),
                "-c:v", "libvpx-vp9",
                "-crf", str(params["crf"]),
                "-b:v", params["bitrate"],
                "-c:a", "libopus" if settings.audio else "copy",
                "-b:a", "64k" if settings.audio else "0",
                "-an" if not settings.audio else "",
                compressed_path
            ]
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            cmd = [x for x in cmd if x]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∂–∞—Ç–∏–µ
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0 and os.path.exists(compressed_path):
                file_size = os.path.getsize(compressed_path)
                if file_size <= 256 * 1024:  # –£—Å–ø–µ—à–Ω–æ —Å–∂–∞–ª–∏ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
                    await processing_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª...")
                    
                    await processing_msg.answer_document(
                        FSInputFile(compressed_path),
                        caption=f"üì± TikTok –≤–∏–¥–µ–æ (—Å–∂–∞—Ç–æ–µ)\n"
                               f"üìê {settings.width}x{settings.height}\n"
                               f"‚è± {duration:.1f}s\n"
                               f"üì¶ {file_size // 1024} KB"
                    )
                    
                    # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
                    try:
                        if os.path.exists(oversized_file_path):
                            os.remove(oversized_file_path)
                        if os.path.exists(compressed_path):
                            os.remove(compressed_path)
                        if os.path.exists(temp_dir):
                            os.rmdir(temp_dir)
                    except Exception:
                        pass
                    
                    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    await cleanup_messages(state, cb.bot)
                    await return_to_main_menu(state, cb)
                    return
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
            if os.path.exists(compressed_path):
                os.remove(compressed_path)
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        await processing_msg.edit_text(
            "‚ùå <b>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å —Ñ–∞–π–ª</b>\n\n"
            "–ü–æ–ø—Ä–æ–±–æ–≤–∞–Ω—ã —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–∂–∞—Ç–∏—è, –Ω–æ —Ñ–∞–π–ª –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ\n" 
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ\n"
            "‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ –∑–≤—É–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tiktok_back_main")]
            ]),
            parse_mode="HTML"
        )
        
        # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        try:
            if os.path.exists(oversized_file_path):
                os.remove(oversized_file_path)
            if os.path.exists(temp_dir):
                os.rmdir(temp_dir)
        except Exception:
            pass
            
    except Exception as e:
        await processing_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tiktok_back_main")]
            ])
        )


async def return_to_main_menu(state: FSMContext, message_or_callback):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    data = await state.get_data()
    settings = data.get("settings")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    downloader: TikTokDownloader = data.get("downloader")
    if downloader:
        downloader.cleanup()
    
    if settings:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –Ω–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ - message –∏–ª–∏ callback
        if hasattr(message_or_callback, 'message'):
            # –≠—Ç–æ callback
            chat_id = message_or_callback.message.chat.id
            bot = message_or_callback.bot
        else:
            # –≠—Ç–æ message
            chat_id = message_or_callback.chat.id
            bot = message_or_callback.bot
        
        try:
            new_menu = await bot.send_message(
                chat_id,
                format_main_menu_text(settings),
                reply_markup=main_menu(),
                parse_mode="HTML"
            )
            await state.update_data(
                menu_message_id=new_menu.message_id,
                chat_id=new_menu.chat.id
            )
        except Exception:
            pass
    
    await state.clear()


async def start_video_processing(cb: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ"""
    data = await state.get_data()
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    await cb.message.delete()
    processing_msg = await cb.message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
    await state.set_state(TikTokEditStates.processing)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        video_path = data["video_path"]
        downloader: TikTokDownloader = data["downloader"]
        settings: Settings = data["settings"]
        
        crop_x = data["crop_x"]
        crop_y = data["crop_y"]
        crop_width = data["crop_width"]
        crop_height = data["crop_height"]
        start_time = data["start_time"]
        duration = data["duration"]
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
        converter = Converter()
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        temp_dir = tempfile.mkdtemp(prefix="tiktok_result_")
        output_path = os.path.join(temp_dir, "result.webm")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É FFmpeg —Å –∫—Ä–æ–ø–æ–º –∏ –æ–±—Ä–µ–∑–∫–æ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        ffmpeg_path = converter.ffmpeg
        
        cmd = [
            ffmpeg_path,
            "-y",
            "-ss", str(start_time),
            "-t", str(duration),
            "-i", video_path,
            "-vf", f"crop={crop_width}:{crop_height}:{crop_x}:{crop_y},scale={settings.width}:{settings.height}:flags=lanczos",
            "-r", str(settings.fps),
        ]
        
        if settings.audio:
            cmd.extend(["-c:a", "libopus", "-b:a", "96k"])
        else:
            cmd.append("-an")
        
        cmd.extend([
            "-c:v", settings.codec,
            "-crf", str(settings.crf),
            "-b:v", "0",
            "-pix_fmt", "yuv420p",
            "-deadline", settings.preset,
            output_path
        ])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await process.communicate()
        
        if process.returncode != 0:
            error_text = stderr.decode('utf-8', errors='ignore')
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:\n{error_text}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            if file_size > 256 * 1024:  # 256 KB
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await state.update_data(
                    oversized_file_path=output_path, 
                    temp_dir_path=temp_dir,
                    awaiting_compression_choice=True  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                )
                
                await processing_msg.edit_text(
                    f"‚ö†Ô∏è <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b>\n\n"
                    f"üì¶ –†–∞–∑–º–µ—Ä: {file_size // 1024} KB\n"
                    f"üìè –õ–∏–º–∏—Ç: 256 KB\n\n"
                    f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üóú –£–º–µ–Ω—å—à–∏—Ç—å –æ–±—ä–µ–º", callback_data="compress_file")],
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="tiktok_back_main")]
                    ]),
                    parse_mode="HTML"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await processing_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
            
            await processing_msg.answer_document(
                FSInputFile(output_path),
                caption=f"üì± TikTok –≤–∏–¥–µ–æ\n"
                       f"üìê {settings.width}x{settings.height}\n"
                       f"‚è± {duration:.1f}s\n"
                       f"üì¶ {file_size // 1024} KB"
            )
            
            # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
            try:
                os.remove(output_path)
                os.rmdir(temp_dir)
            except Exception:
                pass
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await cleanup_messages(state, cb.bot)
            await return_to_main_menu(state, cb)
            return
        else:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    except Exception as e:
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
    
    finally:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–∂–∞—Ç–∏—é
        data = await state.get_data()
        if data.get("awaiting_compression_choice"):
            return  # –ù–µ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä
        
        # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        downloader: TikTokDownloader = data.get("downloader")
        if downloader:
            downloader.cleanup()
        
        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ TikTok
        editor_menu_message_id = data.get("editor_menu_message_id")
        editor_menu_chat_id = data.get("editor_menu_chat_id")
        if editor_menu_message_id and editor_menu_chat_id:
            try:
                await processing_msg.bot.delete_message(editor_menu_chat_id, editor_menu_message_id)
            except Exception:
                pass
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await cleanup_messages(state, processing_msg.bot)
        
        settings = data.get("settings")
        if settings:
            new_menu = await processing_msg.answer(
                format_main_menu_text(settings),
                reply_markup=main_menu(),
                parse_mode="HTML"
            )
            await state.update_data(
                menu_message_id=new_menu.message_id,
                chat_id=new_menu.chat.id
            )
        
        await state.clear()
        await cb.answer()